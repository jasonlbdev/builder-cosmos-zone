import { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import {
  CheckSquare,
  Calendar,
  Clock,
  User,
  Flag,
  Zap,
  Brain,
  Plus,
  Minus,
  Edit3,
  Save,
  AlertCircle,
  CheckCircle,
  Target,
  MessageSquare,
  Mail,
  Sparkles,
  Filter,
  ArrowRight,
} from "lucide-react";
import { cn } from "@/lib/utils";

interface ExtractedTask {
  id: string;
  title: string;
  description?: string;
  priority: "low" | "medium" | "high" | "urgent";
  dueDate?: Date;
  assignees: string[];
  tags: string[];
  confidence: number;
  source: {
    emailId: string;
    emailSubject: string;
    extractedFrom: string;
    context: string;
  };
  actionType: "deadline" | "request" | "follow_up" | "meeting" | "review";
  dependencies?: string[];
  estimated_duration?: string;
  autoGenerated: boolean;
}

interface EmailContext {
  id: string;
  subject: string;
  content: string;
  sender: string;
  recipients: string[];
  timestamp: string;
}

interface EmailToTaskExtractionProps {
  emailContext?: EmailContext;
  onTasksCreated?: (tasks: ExtractedTask[]) => void;
  trigger?: "manual" | "auto";
}

export default function EmailToTaskExtraction({
  emailContext,
  onTasksCreated,
  trigger = "manual"
}: EmailToTaskExtractionProps) {
  const [open, setOpen] = useState(trigger === "auto");
  const [extractedTasks, setExtractedTasks] = useState<ExtractedTask[]>([]);
  const [selectedTasks, setSelectedTasks] = useState<Set<string>>(new Set());
  const [isProcessing, setIsProcessing] = useState(false);
  const [editingTask, setEditingTask] = useState<string | null>(null);
  const [autoExtractionEnabled, setAutoExtractionEnabled] = useState(true);

  // Filters and settings
  const [minConfidence, setMinConfidence] = useState(0.7);
  const [enabledActionTypes, setEnabledActionTypes] = useState<Set<string>>(
    new Set(["deadline", "request", "follow_up", "meeting", "review"])
  );

  useEffect(() => {
    if (emailContext && open) {
      extractTasksFromEmail();
    }
  }, [emailContext, open]);

  const extractTasksFromEmail = async () => {
    if (!emailContext) return;

    setIsProcessing(true);
    
    // Simulate AI task extraction
    setTimeout(() => {
      const mockExtractedTasks: ExtractedTask[] = [
        {
          id: "task_1",
          title: "Review Q4 budget proposal",
          description: "Review the updated Q4 budget proposal and provide feedback by Friday",
          priority: "high",
          dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days from now
          assignees: ["john.smith@company.com"],
          tags: ["budget", "review", "q4"],
          confidence: 0.92,
          source: {
            emailId: emailContext.id,
            emailSubject: emailContext.subject,
            extractedFrom: "Please review the Q4 budget proposal and let me know your thoughts by Friday",
            context: "Deadline mentioned with specific date"
          },
          actionType: "deadline",
          estimated_duration: "2 hours",
          autoGenerated: true
        },
        {
          id: "task_2", 
          title: "Schedule team meeting for project kickoff",
          description: "Coordinate with the team to schedule a project kickoff meeting next week",
          priority: "medium",
          dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week from now
          assignees: ["sarah.johnson@company.com"],
          tags: ["meeting", "project", "kickoff"],
          confidence: 0.85,
          source: {
            emailId: emailContext.id,
            emailSubject: emailContext.subject,
            extractedFrom: "We should schedule a team meeting to kick off the project",
            context: "Meeting request mentioned"
          },
          actionType: "meeting",
          estimated_duration: "30 minutes",
          autoGenerated: true
        },
        {
          id: "task_3",
          title: "Follow up with client on contract terms",
          description: "Reach out to the client regarding the contract terms discussed in the meeting",
          priority: "medium",
          dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 days from now
          assignees: ["mike.wilson@company.com"],
          tags: ["client", "contract", "follow-up"],
          confidence: 0.78,
          source: {
            emailId: emailContext.id,
            emailSubject: emailContext.subject,
            extractedFrom: "I'll follow up with them on the contract terms",
            context: "Follow-up action mentioned"
          },
          actionType: "follow_up",
          estimated_duration: "1 hour",
          autoGenerated: true
        },
        {
          id: "task_4",
          title: "Prepare presentation slides",
          description: "Create presentation slides for the board meeting next month",
          priority: "low",
          dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 2 weeks from now
          assignees: [],
          tags: ["presentation", "board", "slides"],
          confidence: 0.65,
          source: {
            emailId: emailContext.id,
            emailSubject: emailContext.subject,
            extractedFrom: "We'll need slides for the board presentation",
            context: "Preparation task implied"
          },
          actionType: "request",
          estimated_duration: "4 hours",
          autoGenerated: true
        }
      ];

      // Filter tasks based on confidence threshold and enabled action types
      const filteredTasks = mockExtractedTasks.filter(task => 
        task.confidence >= minConfidence && 
        enabledActionTypes.has(task.actionType)
      );

      setExtractedTasks(filteredTasks);
      setSelectedTasks(new Set(filteredTasks.filter(t => t.confidence >= 0.8).map(t => t.id)));
      setIsProcessing(false);
    }, 2000);
  };

  const toggleTaskSelection = (taskId: string) => {
    const newSelected = new Set(selectedTasks);
    if (newSelected.has(taskId)) {
      newSelected.delete(taskId);
    } else {
      newSelected.add(taskId);
    }
    setSelectedTasks(newSelected);
  };

  const updateTask = (taskId: string, updates: Partial<ExtractedTask>) => {
    setExtractedTasks(prev => prev.map(task => 
      task.id === taskId ? { ...task, ...updates } : task
    ));
  };

  const createSelectedTasks = () => {
    const tasksToCreate = extractedTasks.filter(task => selectedTasks.has(task.id));
    onTasksCreated?.(tasksToCreate);
    setOpen(false);
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "urgent": return "text-red-600 bg-red-50 border-red-200";
      case "high": return "text-orange-600 bg-orange-50 border-orange-200";
      case "medium": return "text-yellow-600 bg-yellow-50 border-yellow-200";
      case "low": return "text-green-600 bg-green-50 border-green-200";
      default: return "text-gray-600 bg-gray-50 border-gray-200";
    }
  };

  const getActionTypeIcon = (type: string) => {
    switch (type) {
      case "deadline": return <Clock className="w-4 h-4" />;
      case "request": return <MessageSquare className="w-4 h-4" />;
      case "follow_up": return <ArrowRight className="w-4 h-4" />;
      case "meeting": return <Calendar className="w-4 h-4" />;
      case "review": return <CheckCircle className="w-4 h-4" />;
      default: return <CheckSquare className="w-4 h-4" />;
    }
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.9) return "text-green-600";
    if (confidence >= 0.8) return "text-yellow-600";
    if (confidence >= 0.7) return "text-orange-600";
    return "text-red-600";
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <Brain className="w-4 h-4 mr-2" />
          Extract Tasks
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-6xl max-h-[90vh]">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Sparkles className="w-5 h-5 text-purple-500" />
            <span>AI Task Extraction</span>
            {emailContext && (
              <Badge variant="outline" className="ml-2">
                {emailContext.subject}
              </Badge>
            )}
          </DialogTitle>
        </DialogHeader>

        <div className="grid grid-cols-4 gap-6">
          {/* Settings Panel */}
          <Card>
            <CardHeader>
              <CardTitle className="text-sm">Extraction Settings</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label className="text-xs">Minimum Confidence</Label>
                <div className="flex items-center space-x-2 mt-1">
                  <Input
                    type="range"
                    min="0.5"
                    max="1"
                    step="0.05"
                    value={minConfidence}
                    onChange={(e) => setMinConfidence(parseFloat(e.target.value))}
                    className="flex-1"
                  />
                  <span className="text-xs min-w-[3rem]">{Math.round(minConfidence * 100)}%</span>
                </div>
              </div>

              <div>
                <Label className="text-xs">Action Types</Label>
                <div className="space-y-2 mt-2">
                  {["deadline", "request", "follow_up", "meeting", "review"].map(type => (
                    <div key={type} className="flex items-center space-x-2">
                      <Switch
                        checked={enabledActionTypes.has(type)}
                        onCheckedChange={(checked) => {
                          const newSet = new Set(enabledActionTypes);
                          if (checked) {
                            newSet.add(type);
                          } else {
                            newSet.delete(type);
                          }
                          setEnabledActionTypes(newSet);
                        }}
                      />
                      <Label className="text-xs capitalize">{type.replace("_", " ")}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <Separator />

              <div className="flex items-center justify-between">
                <Label className="text-xs">Auto-extraction</Label>
                <Switch
                  checked={autoExtractionEnabled}
                  onCheckedChange={setAutoExtractionEnabled}
                />
              </div>

              <Button
                variant="outline"
                size="sm"
                onClick={extractTasksFromEmail}
                disabled={isProcessing}
                className="w-full"
              >
                {isProcessing ? (
                  <>
                    <Brain className="w-4 h-4 mr-2 animate-pulse" />
                    Processing...
                  </>
                ) : (
                  <>
                    <Zap className="w-4 h-4 mr-2" />
                    Re-extract
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {/* Main Content */}
          <div className="col-span-3 space-y-4">
            {isProcessing ? (
              <Card>
                <CardContent className="p-8 text-center">
                  <Brain className="w-12 h-12 text-purple-500 mx-auto mb-4 animate-pulse" />
                  <h3 className="text-lg font-semibold mb-2">Analyzing Email Content</h3>
                  <p className="text-muted-foreground">
                    AI is extracting actionable tasks from the email...
                  </p>
                </CardContent>
              </Card>
            ) : extractedTasks.length > 0 ? (
              <>
                {/* Summary */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <h3 className="font-medium">
                      Found {extractedTasks.length} potential tasks
                    </h3>
                    <Badge variant="secondary">
                      {selectedTasks.size} selected
                    </Badge>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedTasks(new Set(extractedTasks.map(t => t.id)))}
                    >
                      Select All
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedTasks(new Set())}
                    >
                      Clear All
                    </Button>
                  </div>
                </div>

                {/* Task List */}
                <ScrollArea className="h-[500px]">
                  <div className="space-y-3">
                    {extractedTasks.map(task => (
                      <Card
                        key={task.id}
                        className={cn(
                          "cursor-pointer transition-colors",
                          selectedTasks.has(task.id) ? "border-blue-500 bg-blue-50" : "hover:bg-accent"
                        )}
                        onClick={() => toggleTaskSelection(task.id)}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-start space-x-3">
                            <div className="mt-1">
                              <input
                                type="checkbox"
                                checked={selectedTasks.has(task.id)}
                                onChange={() => toggleTaskSelection(task.id)}
                                className="rounded"
                              />
                            </div>

                            <div className="flex-1 space-y-2">
                              <div className="flex items-start justify-between">
                                <div className="flex-1">
                                  <h4 className="font-medium text-sm">{task.title}</h4>
                                  {task.description && (
                                    <p className="text-xs text-muted-foreground mt-1">
                                      {task.description}
                                    </p>
                                  )}
                                </div>

                                <div className="flex items-center space-x-2 ml-4">
                                  <Badge
                                    variant="outline"
                                    className={cn("text-xs", getConfidenceColor(task.confidence))}
                                  >
                                    {Math.round(task.confidence * 100)}%
                                  </Badge>
                                  <Badge
                                    variant="outline"
                                    className={cn("text-xs", getPriorityColor(task.priority))}
                                  >
                                    <Flag className="w-3 h-3 mr-1" />
                                    {task.priority}
                                  </Badge>
                                </div>
                              </div>

                              <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-4">
                                  <div className="flex items-center space-x-1">
                                    {getActionTypeIcon(task.actionType)}
                                    <span className="text-xs capitalize text-muted-foreground">
                                      {task.actionType.replace("_", " ")}
                                    </span>
                                  </div>

                                  {task.dueDate && (
                                    <div className="flex items-center space-x-1">
                                      <Calendar className="w-3 h-3" />
                                      <span className="text-xs text-muted-foreground">
                                        {task.dueDate.toLocaleDateString()}
                                      </span>
                                    </div>
                                  )}

                                  {task.estimated_duration && (
                                    <div className="flex items-center space-x-1">
                                      <Clock className="w-3 h-3" />
                                      <span className="text-xs text-muted-foreground">
                                        {task.estimated_duration}
                                      </span>
                                    </div>
                                  )}
                                </div>

                                <div className="flex items-center space-x-2">
                                  {task.tags.slice(0, 2).map(tag => (
                                    <Badge key={tag} variant="secondary" className="text-xs">
                                      {tag}
                                    </Badge>
                                  ))}
                                  {task.tags.length > 2 && (
                                    <Badge variant="secondary" className="text-xs">
                                      +{task.tags.length - 2}
                                    </Badge>
                                  )}
                                </div>
                              </div>

                              {/* Source Context */}
                              <div className="bg-accent p-2 rounded text-xs">
                                <div className="flex items-start space-x-2">
                                  <MessageSquare className="w-3 h-3 mt-0.5 text-muted-foreground" />
                                  <div className="flex-1">
                                    <p className="italic">"{task.source.extractedFrom}"</p>
                                    <p className="text-muted-foreground mt-1">{task.source.context}</p>
                                  </div>
                                </div>
                              </div>

                              {/* Quick Edit */}
                              {editingTask === task.id && (
                                <div className="grid grid-cols-3 gap-2 p-2 bg-background rounded border">
                                  <Select
                                    value={task.priority}
                                    onValueChange={(value: any) => updateTask(task.id, { priority: value })}
                                  >
                                    <SelectTrigger className="h-8">
                                      <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                      <SelectItem value="low">Low</SelectItem>
                                      <SelectItem value="medium">Medium</SelectItem>
                                      <SelectItem value="high">High</SelectItem>
                                      <SelectItem value="urgent">Urgent</SelectItem>
                                    </SelectContent>
                                  </Select>

                                  <Input
                                    type="date"
                                    value={task.dueDate?.toISOString().split('T')[0] || ""}
                                    onChange={(e) => updateTask(task.id, { 
                                      dueDate: e.target.value ? new Date(e.target.value) : undefined 
                                    })}
                                    className="h-8"
                                  />

                                  <Input
                                    value={task.assignees.join(", ")}
                                    onChange={(e) => updateTask(task.id, { 
                                      assignees: e.target.value.split(",").map(s => s.trim()) 
                                    })}
                                    placeholder="Assignees..."
                                    className="h-8"
                                  />
                                </div>
                              )}
                            </div>

                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation();
                                setEditingTask(editingTask === task.id ? null : task.id);
                              }}
                            >
                              <Edit3 className="w-3 h-3" />
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </ScrollArea>

                {/* Actions */}
                <div className="flex items-center justify-between pt-4 border-t">
                  <div className="text-sm text-muted-foreground">
                    {selectedTasks.size} of {extractedTasks.length} tasks selected
                  </div>
                  
                  <div className="flex space-x-2">
                    <Button variant="outline" onClick={() => setOpen(false)}>
                      Cancel
                    </Button>
                    <Button
                      onClick={createSelectedTasks}
                      disabled={selectedTasks.size === 0}
                    >
                      <Save className="w-4 h-4 mr-2" />
                      Create {selectedTasks.size} Tasks
                    </Button>
                  </div>
                </div>
              </>
            ) : (
              <Card>
                <CardContent className="p-8 text-center">
                  <AlertCircle className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No Tasks Found</h3>
                  <p className="text-muted-foreground">
                    No actionable tasks could be extracted from this email.
                    Try adjusting the confidence threshold or re-running the extraction.
                  </p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
